---
// Performance optimization for better Core Web Vitals
---

<!-- Preload critical resources -->
<link rel="preload" href="/favicon.svg" as="image" type="image/svg+xml" />
<link
	rel="preload"
	href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Space+Grotesk:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap"
	as="style"
/>

<!-- DNS Prefetch for external domains -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//fonts.gstatic.com" />
<link rel="dns-prefetch" href="//iiyjiikbtsckevydbcsj.supabase.co" />
<link rel="dns-prefetch" href="//photo.shawnpaps.dev" />

<!-- Resource Hints -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="preconnect" href="https://iiyjiikbtsckevydbcsj.supabase.co" />
<link rel="preconnect" href="https://photo.shawnpaps.dev" />

<!-- Performance monitoring script -->
<script>
	// Monitor Core Web Vitals
	if ('PerformanceObserver' in window) {
		try {
			// Largest Contentful Paint
			new PerformanceObserver((entryList) => {
				for (const entry of entryList.getEntries()) {
					if (entry.entryType === 'largest-contentful-paint') {
						console.log('LCP:', entry.startTime);
						// Send to analytics
						if (typeof (window as any).gtag !== 'undefined') {
							(window as any).gtag('event', 'web_vitals', {
								event_category: 'Web Vitals',
								event_label: 'LCP',
								value: Math.round(entry.startTime),
							});
						}
					}
				}
			}).observe({ entryTypes: ['largest-contentful-paint'] });

			// First Input Delay
			new PerformanceObserver((entryList) => {
				for (const entry of entryList.getEntries()) {
					if (entry.entryType === 'first-input') {
						const fidEntry = entry as any;
						console.log('FID:', fidEntry.processingStart - entry.startTime);
						// Send to analytics
						if (typeof (window as any).gtag !== 'undefined') {
							(window as any).gtag('event', 'web_vitals', {
								event_category: 'Web Vitals',
								event_label: 'FID',
								value: Math.round(fidEntry.processingStart - entry.startTime),
							});
						}
					}
				}
			}).observe({ entryTypes: ['first-input'] });

			// Cumulative Layout Shift
			new PerformanceObserver((entryList) => {
				let cls = 0;
				for (const entry of entryList.getEntries()) {
					if (entry.entryType === 'layout-shift') {
						const layoutShiftEntry = entry as any;
						if (!layoutShiftEntry.hadRecentInput) {
							cls += layoutShiftEntry.value;
						}
					}
				}
				if (cls > 0) {
					console.log('CLS:', cls);
					// Send to analytics
					if (typeof (window as any).gtag !== 'undefined') {
						(window as any).gtag('event', 'web_vitals', {
							event_category: 'Web Vitals',
							event_label: 'CLS',
							value: Math.round(cls * 1000) / 1000,
						});
					}
				}
			}).observe({ entryTypes: ['layout-shift'] });
		} catch (e) {
			console.warn('Performance monitoring failed:', e);
		}
	}

	// Lazy load images
	document.addEventListener('DOMContentLoaded', function () {
		const images = document.querySelectorAll('img[data-src]');
		const imageObserver = new IntersectionObserver((entries, observer) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					const img = entry.target as HTMLImageElement;
					img.src = img.dataset.src || '';
					img.classList.remove('lazy');
					observer.unobserve(img);
				}
			});
		});

		images.forEach((img) => imageObserver.observe(img));
	});

	// Service Worker registration for caching
	if ('serviceWorker' in navigator) {
		window.addEventListener('load', function () {
			navigator.serviceWorker
				.register('/sw.js')
				.then(function (registration) {
					console.log('SW registered: ', registration);
				})
				.catch(function (registrationError) {
					console.log('SW registration failed: ', registrationError);
				});
		});
	}
</script>

<!-- Critical CSS inline -->
<style>
	/* Critical above-the-fold styles */
	.font-display {
		font-family: 'Orbitron', monospace;
	}
	.font-heading {
		font-family: 'Space Grotesk', sans-serif;
	}
	.font-body {
		font-family: 'Inter', sans-serif;
	}

	/* Prevent layout shift */
	img {
		max-width: 100%;
		height: auto;
	}

	/* Smooth scrolling */
	html {
		scroll-behavior: smooth;
	}

	/* Optimize animations */
	@media (prefers-reduced-motion: reduce) {
		*,
		*::before,
		*::after {
			animation-duration: 0.01ms !important;
			animation-iteration-count: 1 !important;
			transition-duration: 0.01ms !important;
		}
	}
</style>
