---
export interface Props {
	items: Array<{
		label: string;
		url?: string;
		current?: boolean;
	}>;
}

const { items } = Astro.props;
---

<nav class="flex" aria-label="Breadcrumb">
	<ol class="inline-flex items-center space-x-1 md:space-x-3">
		{
			items.map((item, index) => (
				<li class="inline-flex items-center">
					{index > 0 && (
						<svg
							class="w-6 h-6 text-moody-400 mx-2"
							fill="currentColor"
							viewBox="0 0 20 20"
							xmlns="http://www.w3.org/2000/svg">
							<path
								fill-rule="evenodd"
								d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
								clip-rule="evenodd"
							/>
						</svg>
					)}
					{item.current ? (
						<span class="text-warm-400 font-medium" aria-current="page">
							{item.label}
						</span>
					) : item.url ? (
						<a
							href={item.url}
							class="text-moody-400 hover:text-warm-400 transition-colors duration-200">
							{item.label}
						</a>
					) : (
						<span class="text-moody-400">{item.label}</span>
					)}
				</li>
			))
		}
	</ol>
</nav>

<!-- Structured Data for Breadcrumbs -->
<script
	type="application/ld+json"
	set:html={JSON.stringify({
		'@context': 'https://schema.org',
		'@type': 'BreadcrumbList',
		itemListElement: items.map((item, index) => ({
			'@type': 'ListItem',
			position: index + 1,
			name: item.label,
			...(item.url && { item: item.url }),
		})),
	})}
/>

